#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EZCab.Reservation
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class LINQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDRIVER(DRIVER instance);
    partial void UpdateDRIVER(DRIVER instance);
    partial void DeleteDRIVER(DRIVER instance);
    partial void InsertMEMBER(MEMBER instance);
    partial void UpdateMEMBER(MEMBER instance);
    partial void DeleteMEMBER(MEMBER instance);
    partial void InsertRESERVATION(RESERVATION instance);
    partial void UpdateRESERVATION(RESERVATION instance);
    partial void DeleteRESERVATION(RESERVATION instance);
    partial void InsertTRANSACTION2(TRANSACTION2 instance);
    partial void UpdateTRANSACTION2(TRANSACTION2 instance);
    partial void DeleteTRANSACTION2(TRANSACTION2 instance);
    #endregion
		
		public LINQDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Database1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DRIVER> DRIVERs
		{
			get
			{
				return this.GetTable<DRIVER>();
			}
		}
		
		public System.Data.Linq.Table<MEMBER> MEMBERs
		{
			get
			{
				return this.GetTable<MEMBER>();
			}
		}
		
		public System.Data.Linq.Table<RESERVATION> RESERVATIONs
		{
			get
			{
				return this.GetTable<RESERVATION>();
			}
		}
		
		public System.Data.Linq.Table<TRANSACTION2> TRANSACTION2s
		{
			get
			{
				return this.GetTable<TRANSACTION2>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DRIVER")]
	public partial class DRIVER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DriverID;
		
		private string _DriverName;
		
		private string _ICNO;
		
		private string _CarPlateNo;
		
		private System.DateTime _ExpiredDriverLicense;
		
		private int _ContactNo;
		
		private EntitySet<RESERVATION> _RESERVATIONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriverIDChanging(string value);
    partial void OnDriverIDChanged();
    partial void OnDriverNameChanging(string value);
    partial void OnDriverNameChanged();
    partial void OnICNOChanging(string value);
    partial void OnICNOChanged();
    partial void OnCarPlateNoChanging(string value);
    partial void OnCarPlateNoChanged();
    partial void OnExpiredDriverLicenseChanging(System.DateTime value);
    partial void OnExpiredDriverLicenseChanged();
    partial void OnContactNoChanging(int value);
    partial void OnContactNoChanged();
    #endregion
		
		public DRIVER()
		{
			this._RESERVATIONs = new EntitySet<RESERVATION>(new Action<RESERVATION>(this.attach_RESERVATIONs), new Action<RESERVATION>(this.detach_RESERVATIONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					this.OnDriverIDChanging(value);
					this.SendPropertyChanging();
					this._DriverID = value;
					this.SendPropertyChanged("DriverID");
					this.OnDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DriverName
		{
			get
			{
				return this._DriverName;
			}
			set
			{
				if ((this._DriverName != value))
				{
					this.OnDriverNameChanging(value);
					this.SendPropertyChanging();
					this._DriverName = value;
					this.SendPropertyChanged("DriverName");
					this.OnDriverNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICNO", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ICNO
		{
			get
			{
				return this._ICNO;
			}
			set
			{
				if ((this._ICNO != value))
				{
					this.OnICNOChanging(value);
					this.SendPropertyChanging();
					this._ICNO = value;
					this.SendPropertyChanged("ICNO");
					this.OnICNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarPlateNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CarPlateNo
		{
			get
			{
				return this._CarPlateNo;
			}
			set
			{
				if ((this._CarPlateNo != value))
				{
					this.OnCarPlateNoChanging(value);
					this.SendPropertyChanging();
					this._CarPlateNo = value;
					this.SendPropertyChanged("CarPlateNo");
					this.OnCarPlateNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiredDriverLicense", DbType="Date NOT NULL")]
		public System.DateTime ExpiredDriverLicense
		{
			get
			{
				return this._ExpiredDriverLicense;
			}
			set
			{
				if ((this._ExpiredDriverLicense != value))
				{
					this.OnExpiredDriverLicenseChanging(value);
					this.SendPropertyChanging();
					this._ExpiredDriverLicense = value;
					this.SendPropertyChanged("ExpiredDriverLicense");
					this.OnExpiredDriverLicenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="Int NOT NULL")]
		public int ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DRIVER_RESERVATION", Storage="_RESERVATIONs", ThisKey="DriverID", OtherKey="DriverID")]
		public EntitySet<RESERVATION> RESERVATIONs
		{
			get
			{
				return this._RESERVATIONs;
			}
			set
			{
				this._RESERVATIONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RESERVATIONs(RESERVATION entity)
		{
			this.SendPropertyChanging();
			entity.DRIVER = this;
		}
		
		private void detach_RESERVATIONs(RESERVATION entity)
		{
			this.SendPropertyChanging();
			entity.DRIVER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MEMBER")]
	public partial class MEMBER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _Password;
		
		private string _Email;
		
		private int _PhoneNum;
		
		private string _Address;
		
		private EntitySet<RESERVATION> _RESERVATIONs;
		
		private EntitySet<TRANSACTION2> _TRANSACTION2s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumChanging(int value);
    partial void OnPhoneNumChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public MEMBER()
		{
			this._RESERVATIONs = new EntitySet<RESERVATION>(new Action<RESERVATION>(this.attach_RESERVATIONs), new Action<RESERVATION>(this.detach_RESERVATIONs));
			this._TRANSACTION2s = new EntitySet<TRANSACTION2>(new Action<TRANSACTION2>(this.attach_TRANSACTION2s), new Action<TRANSACTION2>(this.detach_TRANSACTION2s));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNum", DbType="Int NOT NULL")]
		public int PhoneNum
		{
			get
			{
				return this._PhoneNum;
			}
			set
			{
				if ((this._PhoneNum != value))
				{
					this.OnPhoneNumChanging(value);
					this.SendPropertyChanging();
					this._PhoneNum = value;
					this.SendPropertyChanged("PhoneNum");
					this.OnPhoneNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEMBER_RESERVATION", Storage="_RESERVATIONs", ThisKey="Email", OtherKey="Email")]
		public EntitySet<RESERVATION> RESERVATIONs
		{
			get
			{
				return this._RESERVATIONs;
			}
			set
			{
				this._RESERVATIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEMBER_TRANSACTION2", Storage="_TRANSACTION2s", ThisKey="Email", OtherKey="email")]
		public EntitySet<TRANSACTION2> TRANSACTION2s
		{
			get
			{
				return this._TRANSACTION2s;
			}
			set
			{
				this._TRANSACTION2s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RESERVATIONs(RESERVATION entity)
		{
			this.SendPropertyChanging();
			entity.MEMBER = this;
		}
		
		private void detach_RESERVATIONs(RESERVATION entity)
		{
			this.SendPropertyChanging();
			entity.MEMBER = null;
		}
		
		private void attach_TRANSACTION2s(TRANSACTION2 entity)
		{
			this.SendPropertyChanging();
			entity.MEMBER = this;
		}
		
		private void detach_TRANSACTION2s(TRANSACTION2 entity)
		{
			this.SendPropertyChanging();
			entity.MEMBER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RESERVATION")]
	public partial class RESERVATION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReservationID;
		
		private System.DateTime _ReservationStartTime;
		
		private System.DateTime _ReservationEndTime;
		
		private string _PickUpLocation;
		
		private string _Destination;
		
		private string _Email;
		
		private string _DriverID;
		
		private string _Price;
		
		private EntityRef<DRIVER> _DRIVER;
		
		private EntityRef<MEMBER> _MEMBER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationIDChanging(int value);
    partial void OnReservationIDChanged();
    partial void OnReservationStartTimeChanging(System.DateTime value);
    partial void OnReservationStartTimeChanged();
    partial void OnReservationEndTimeChanging(System.DateTime value);
    partial void OnReservationEndTimeChanged();
    partial void OnPickUpLocationChanging(string value);
    partial void OnPickUpLocationChanged();
    partial void OnDestinationChanging(string value);
    partial void OnDestinationChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDriverIDChanging(string value);
    partial void OnDriverIDChanged();
    partial void OnPriceChanging(string value);
    partial void OnPriceChanged();
    #endregion
		
		public RESERVATION()
		{
			this._DRIVER = default(EntityRef<DRIVER>);
			this._MEMBER = default(EntityRef<MEMBER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReservationID
		{
			get
			{
				return this._ReservationID;
			}
			set
			{
				if ((this._ReservationID != value))
				{
					this.OnReservationIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationID = value;
					this.SendPropertyChanged("ReservationID");
					this.OnReservationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationStartTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime ReservationStartTime
		{
			get
			{
				return this._ReservationStartTime;
			}
			set
			{
				if ((this._ReservationStartTime != value))
				{
					this.OnReservationStartTimeChanging(value);
					this.SendPropertyChanging();
					this._ReservationStartTime = value;
					this.SendPropertyChanged("ReservationStartTime");
					this.OnReservationStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationEndTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime ReservationEndTime
		{
			get
			{
				return this._ReservationEndTime;
			}
			set
			{
				if ((this._ReservationEndTime != value))
				{
					this.OnReservationEndTimeChanging(value);
					this.SendPropertyChanging();
					this._ReservationEndTime = value;
					this.SendPropertyChanged("ReservationEndTime");
					this.OnReservationEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickUpLocation", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PickUpLocation
		{
			get
			{
				return this._PickUpLocation;
			}
			set
			{
				if ((this._PickUpLocation != value))
				{
					this.OnPickUpLocationChanging(value);
					this.SendPropertyChanging();
					this._PickUpLocation = value;
					this.SendPropertyChanged("PickUpLocation");
					this.OnPickUpLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Destination", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Destination
		{
			get
			{
				return this._Destination;
			}
			set
			{
				if ((this._Destination != value))
				{
					this.OnDestinationChanging(value);
					this.SendPropertyChanging();
					this._Destination = value;
					this.SendPropertyChanged("Destination");
					this.OnDestinationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					if (this._MEMBER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					if (this._DRIVER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverIDChanging(value);
					this.SendPropertyChanging();
					this._DriverID = value;
					this.SendPropertyChanged("DriverID");
					this.OnDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DRIVER_RESERVATION", Storage="_DRIVER", ThisKey="DriverID", OtherKey="DriverID", IsForeignKey=true)]
		public DRIVER DRIVER
		{
			get
			{
				return this._DRIVER.Entity;
			}
			set
			{
				DRIVER previousValue = this._DRIVER.Entity;
				if (((previousValue != value) 
							|| (this._DRIVER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DRIVER.Entity = null;
						previousValue.RESERVATIONs.Remove(this);
					}
					this._DRIVER.Entity = value;
					if ((value != null))
					{
						value.RESERVATIONs.Add(this);
						this._DriverID = value.DriverID;
					}
					else
					{
						this._DriverID = default(string);
					}
					this.SendPropertyChanged("DRIVER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEMBER_RESERVATION", Storage="_MEMBER", ThisKey="Email", OtherKey="Email", IsForeignKey=true)]
		public MEMBER MEMBER
		{
			get
			{
				return this._MEMBER.Entity;
			}
			set
			{
				MEMBER previousValue = this._MEMBER.Entity;
				if (((previousValue != value) 
							|| (this._MEMBER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEMBER.Entity = null;
						previousValue.RESERVATIONs.Remove(this);
					}
					this._MEMBER.Entity = value;
					if ((value != null))
					{
						value.RESERVATIONs.Add(this);
						this._Email = value.Email;
					}
					else
					{
						this._Email = default(string);
					}
					this.SendPropertyChanged("MEMBER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TRANSACTION2")]
	public partial class TRANSACTION2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransactionID;
		
		private string _price;
		
		private string _email;
		
		private EntityRef<MEMBER> _MEMBER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(int value);
    partial void OnTransactionIDChanged();
    partial void OnpriceChanging(string value);
    partial void OnpriceChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public TRANSACTION2()
		{
			this._MEMBER = default(EntityRef<MEMBER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					if (this._MEMBER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEMBER_TRANSACTION2", Storage="_MEMBER", ThisKey="email", OtherKey="Email", IsForeignKey=true)]
		public MEMBER MEMBER
		{
			get
			{
				return this._MEMBER.Entity;
			}
			set
			{
				MEMBER previousValue = this._MEMBER.Entity;
				if (((previousValue != value) 
							|| (this._MEMBER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEMBER.Entity = null;
						previousValue.TRANSACTION2s.Remove(this);
					}
					this._MEMBER.Entity = value;
					if ((value != null))
					{
						value.TRANSACTION2s.Add(this);
						this._email = value.Email;
					}
					else
					{
						this._email = default(string);
					}
					this.SendPropertyChanged("MEMBER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
